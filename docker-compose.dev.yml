services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: agrovision_dev
      POSTGRES_USER: agrovision
      POSTGRES_PASSWORD: "0106800"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - agrovision-network
    restart: unless-stopped

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agrovision-network
    restart: unless-stopped

  # NestJS Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://agrovision:0106800@postgres:5432/agrovision_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      AI_SERVICE_URL: http://ai-service:8000
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - agrovision-network
    restart: unless-stopped
    command: pnpm run start:dev

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_AI_SERVICE_URL: http://localhost:8000
      DATABASE_URL: postgresql://agrovision:0106800@postgres:5432/agrovision_dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./database/prisma:/app/prisma
      # Do not mount .next during dev unless you're debugging it specifically
      # or unless you generate it locally before running the container
      # it disable css 
      # - /app/.next

    depends_on:
      - backend
    networks:
      - agrovision-network
    restart: unless-stopped
    command: pnpm run dev

  # Python AI Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      ENVIRONMENT: development
      POSTGRES_SERVER: postgres
      POSTGRES_USER: agrovision
      POSTGRES_PASSWORD: 0106800
      POSTGRES_DB: agrovision_dev
      REDIS_URL: redis://redis:6379
    volumes:
      - ./ai-service:/app
      - ./uploads:/app/uploads
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - agrovision-network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Development Tools
  pgadmin:
    image: dpage/pgadmin4:8
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@agrovision.com
      PGADMIN_DEFAULT_PASSWORD: 0106800
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - agrovision-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - agrovision-network

volumes:
  postgres_data:
  redis_data:

networks:
  agrovision-network:
    driver: bridge 